plugins {
	id 'org.springframework.boot' version '2.5.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'pl.allegro.tech.build.axion-release' version '1.13.2'
	id "com.palantir.docker" version "0.30.0"
	id "com.palantir.docker-run" version "0.22.1"
	id 'jp.classmethod.aws.cloudformation' version '0.41'

}
version = scmVersion.version
sourceCompatibility = 8
repositories {
	mavenCentral()
}

String dockerHubUsernameProperty = findProperty('dockerHubUsername') ?: 'thasnimhm'
String imageName = "${dockerHubUsernameProperty}/cloud-demo:$version"

docker {
	name imageName
	files "build/libs/${bootJar.archiveFileName.get()}"
	buildArgs([JAR_FILE: bootJar.archiveFileName.get()])
}



dockerRun {
	name project.name
	image imageName
	ports '8080:8080'
	clean true
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	useJUnitPlatform()
}

aws {
	region = findProperty('region') ?: 'ap-south-1'
}

cloudFormation {
	stackName "$project.name-stack"
	stackParams([
			SubnetID: findProperty('subnetId') ?: '',
			ServiceName: project.name,
			ServiceVersion: project.version,
			DockerHubUsername: dockerHubUsernameProperty
	])
	templateFile project.file("ecs.yml")
}